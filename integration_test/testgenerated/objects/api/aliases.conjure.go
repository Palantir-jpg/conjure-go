// This file was generated by Conjure and should not be manually edited.

package api

import (
	"github.com/palantir/pkg/rid"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	"github.com/palantir/pkg/uuid"
)

type BinaryAlias []byte
type ListAlias []string

func (a ListAlias) MarshalJSON() ([]byte, error) {
	if a == nil {
		a = make([]string, 0)
	}
	return safejson.Marshal([]string(a))
}

func (a *ListAlias) UnmarshalJSON(data []byte) error {
	var rawListAlias []string
	if err := safejson.Unmarshal(data, &rawListAlias); err != nil {
		return err
	}
	if rawListAlias == nil {
		*a = make([]string, 0)
	} else {
		*a = ListAlias(rawListAlias)
	}
	return nil
}

func (a ListAlias) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *ListAlias) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type MapAlias map[string]string

func (a MapAlias) MarshalJSON() ([]byte, error) {
	if a == nil {
		a = make(map[string]string, 0)
	}
	return safejson.Marshal(map[string]string(a))
}

func (a *MapAlias) UnmarshalJSON(data []byte) error {
	var rawMapAlias map[string]string
	if err := safejson.Unmarshal(data, &rawMapAlias); err != nil {
		return err
	}
	if rawMapAlias == nil {
		*a = make(map[string]string, 0)
	} else {
		*a = MapAlias(rawMapAlias)
	}
	return nil
}

func (a MapAlias) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *MapAlias) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type OptionalUuidAlias struct {
	Value *uuid.UUID
}

func (a OptionalUuidAlias) MarshalText() ([]byte, error) {
	if a.Value == nil {
		return nil, nil
	}
	return a.Value.MarshalText()
}

func (a *OptionalUuidAlias) UnmarshalText(data []byte) error {
	if a.Value == nil {
		a.Value = new(uuid.UUID)
	}
	return a.Value.UnmarshalText(data)
}

func (a OptionalUuidAlias) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *OptionalUuidAlias) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type RidAlias rid.ResourceIdentifier

func (a RidAlias) String() string {
	return rid.ResourceIdentifier(a).String()
}

func (a RidAlias) MarshalText() ([]byte, error) {
	return rid.ResourceIdentifier(a).MarshalText()
}

func (a *RidAlias) UnmarshalText(data []byte) error {
	var rawRidAlias rid.ResourceIdentifier
	if err := rawRidAlias.UnmarshalText(data); err != nil {
		return err
	}
	*a = RidAlias(rawRidAlias)
	return nil
}

func (a RidAlias) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *RidAlias) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type UuidAlias uuid.UUID

func (a UuidAlias) String() string {
	return uuid.UUID(a).String()
}

func (a UuidAlias) MarshalText() ([]byte, error) {
	return uuid.UUID(a).MarshalText()
}

func (a *UuidAlias) UnmarshalText(data []byte) error {
	var rawUuidAlias uuid.UUID
	if err := rawUuidAlias.UnmarshalText(data); err != nil {
		return err
	}
	*a = UuidAlias(rawUuidAlias)
	return nil
}

func (a UuidAlias) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *UuidAlias) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type UuidAlias2 Compound

func (a UuidAlias2) MarshalJSON() ([]byte, error) {
	return safejson.Marshal(Compound(a))
}

func (a *UuidAlias2) UnmarshalJSON(data []byte) error {
	var rawUuidAlias2 Compound
	if err := safejson.Unmarshal(data, &rawUuidAlias2); err != nil {
		return err
	}
	*a = UuidAlias2(rawUuidAlias2)
	return nil
}

func (a UuidAlias2) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *UuidAlias2) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}
