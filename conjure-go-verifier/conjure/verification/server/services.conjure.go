// This file was generated by Conjure and should not be manually edited.

package server

import (
	"context"
	"fmt"
	"net/url"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	"github.com/palantir/conjure-go/v5/conjure-go-verifier/conjure/verification/types"
	"github.com/palantir/pkg/bearertoken"
	"github.com/palantir/pkg/datetime"
	"github.com/palantir/pkg/rid"
	"github.com/palantir/pkg/safelong"
	"github.com/palantir/pkg/uuid"
	werror "github.com/palantir/witchcraft-go-error"
)

type AutoDeserializeServiceClient interface {
	ReceiveBearerTokenExample(ctx context.Context, indexArg int) (types.BearerTokenExample, error)
	ReceiveBooleanExample(ctx context.Context, indexArg int) (types.BooleanExample, error)
	ReceiveDateTimeExample(ctx context.Context, indexArg int) (types.DateTimeExample, error)
	ReceiveDoubleExample(ctx context.Context, indexArg int) (types.DoubleExample, error)
	ReceiveIntegerExample(ctx context.Context, indexArg int) (types.IntegerExample, error)
	ReceiveRidExample(ctx context.Context, indexArg int) (types.RidExample, error)
	ReceiveSafeLongExample(ctx context.Context, indexArg int) (types.SafeLongExample, error)
	ReceiveStringExample(ctx context.Context, indexArg int) (types.StringExample, error)
	ReceiveUuidExample(ctx context.Context, indexArg int) (types.UuidExample, error)
	ReceiveAnyExample(ctx context.Context, indexArg int) (types.AnyExample, error)
	ReceiveListExample(ctx context.Context, indexArg int) (types.ListExample, error)
	ReceiveSetStringExample(ctx context.Context, indexArg int) (types.SetStringExample, error)
	ReceiveSetDoubleExample(ctx context.Context, indexArg int) (types.SetDoubleExample, error)
	ReceiveMapExample(ctx context.Context, indexArg int) (types.MapExample, error)
	ReceiveOptionalExample(ctx context.Context, indexArg int) (types.OptionalExample, error)
	ReceiveOptionalBooleanExample(ctx context.Context, indexArg int) (types.OptionalBooleanExample, error)
	ReceiveOptionalIntegerExample(ctx context.Context, indexArg int) (types.OptionalIntegerExample, error)
	ReceiveLongFieldNameOptionalExample(ctx context.Context, indexArg int) (types.LongFieldNameOptionalExample, error)
	ReceiveRawOptionalExample(ctx context.Context, indexArg int) (types.RawOptionalExample, error)
	ReceiveStringAliasExample(ctx context.Context, indexArg int) (types.StringAliasExample, error)
	ReceiveDoubleAliasExample(ctx context.Context, indexArg int) (types.DoubleAliasExample, error)
	ReceiveIntegerAliasExample(ctx context.Context, indexArg int) (types.IntegerAliasExample, error)
	ReceiveBooleanAliasExample(ctx context.Context, indexArg int) (types.BooleanAliasExample, error)
	ReceiveSafeLongAliasExample(ctx context.Context, indexArg int) (types.SafeLongAliasExample, error)
	ReceiveRidAliasExample(ctx context.Context, indexArg int) (types.RidAliasExample, error)
	ReceiveBearerTokenAliasExample(ctx context.Context, indexArg int) (types.BearerTokenAliasExample, error)
	ReceiveUuidAliasExample(ctx context.Context, indexArg int) (types.UuidAliasExample, error)
	ReceiveReferenceAliasExample(ctx context.Context, indexArg int) (types.ReferenceAliasExample, error)
	ReceiveDateTimeAliasExample(ctx context.Context, indexArg int) (types.DateTimeAliasExample, error)
	ReceiveKebabCaseObjectExample(ctx context.Context, indexArg int) (types.KebabCaseObjectExample, error)
	ReceiveSnakeCaseObjectExample(ctx context.Context, indexArg int) (types.SnakeCaseObjectExample, error)
	ReceiveOptionalBearerTokenAliasExample(ctx context.Context, indexArg int) (types.OptionalBearerTokenAliasExample, error)
	ReceiveOptionalBinaryAliasExample(ctx context.Context, indexArg int) (types.OptionalBinaryAliasExample, error)
	ReceiveOptionalBooleanAliasExample(ctx context.Context, indexArg int) (types.OptionalBooleanAliasExample, error)
	ReceiveOptionalDateTimeAliasExample(ctx context.Context, indexArg int) (types.OptionalDateTimeAliasExample, error)
	ReceiveOptionalDoubleAliasExample(ctx context.Context, indexArg int) (types.OptionalDoubleAliasExample, error)
	ReceiveOptionalIntegerAliasExample(ctx context.Context, indexArg int) (types.OptionalIntegerAliasExample, error)
	ReceiveOptionalRidAliasExample(ctx context.Context, indexArg int) (types.OptionalRidAliasExample, error)
	ReceiveOptionalSafeLongAliasExample(ctx context.Context, indexArg int) (types.OptionalSafeLongAliasExample, error)
	ReceiveOptionalStringAliasExample(ctx context.Context, indexArg int) (types.OptionalStringAliasExample, error)
	ReceiveOptionalUuidAliasExample(ctx context.Context, indexArg int) (types.OptionalUuidAliasExample, error)
	ReceiveOptionalAnyAliasExample(ctx context.Context, indexArg int) (types.OptionalAnyAliasExample, error)
	ReceiveListBearerTokenAliasExample(ctx context.Context, indexArg int) (types.ListBearerTokenAliasExample, error)
	ReceiveListBinaryAliasExample(ctx context.Context, indexArg int) (types.ListBinaryAliasExample, error)
	ReceiveListBooleanAliasExample(ctx context.Context, indexArg int) (types.ListBooleanAliasExample, error)
	ReceiveListDateTimeAliasExample(ctx context.Context, indexArg int) (types.ListDateTimeAliasExample, error)
	ReceiveListDoubleAliasExample(ctx context.Context, indexArg int) (types.ListDoubleAliasExample, error)
	ReceiveListIntegerAliasExample(ctx context.Context, indexArg int) (types.ListIntegerAliasExample, error)
	ReceiveListRidAliasExample(ctx context.Context, indexArg int) (types.ListRidAliasExample, error)
	ReceiveListSafeLongAliasExample(ctx context.Context, indexArg int) (types.ListSafeLongAliasExample, error)
	ReceiveListStringAliasExample(ctx context.Context, indexArg int) (types.ListStringAliasExample, error)
	ReceiveListUuidAliasExample(ctx context.Context, indexArg int) (types.ListUuidAliasExample, error)
	ReceiveListAnyAliasExample(ctx context.Context, indexArg int) (types.ListAnyAliasExample, error)
	ReceiveSetBearerTokenAliasExample(ctx context.Context, indexArg int) (types.SetBearerTokenAliasExample, error)
	ReceiveSetBinaryAliasExample(ctx context.Context, indexArg int) (types.SetBinaryAliasExample, error)
	ReceiveSetBooleanAliasExample(ctx context.Context, indexArg int) (types.SetBooleanAliasExample, error)
	ReceiveSetDateTimeAliasExample(ctx context.Context, indexArg int) (types.SetDateTimeAliasExample, error)
	ReceiveSetDoubleAliasExample(ctx context.Context, indexArg int) (types.SetDoubleAliasExample, error)
	ReceiveSetIntegerAliasExample(ctx context.Context, indexArg int) (types.SetIntegerAliasExample, error)
	ReceiveSetRidAliasExample(ctx context.Context, indexArg int) (types.SetRidAliasExample, error)
	ReceiveSetSafeLongAliasExample(ctx context.Context, indexArg int) (types.SetSafeLongAliasExample, error)
	ReceiveSetStringAliasExample(ctx context.Context, indexArg int) (types.SetStringAliasExample, error)
	ReceiveSetUuidAliasExample(ctx context.Context, indexArg int) (types.SetUuidAliasExample, error)
	ReceiveSetAnyAliasExample(ctx context.Context, indexArg int) (types.SetAnyAliasExample, error)
	ReceiveMapBearerTokenAliasExample(ctx context.Context, indexArg int) (types.MapBearerTokenAliasExample, error)
	ReceiveMapBinaryAliasExample(ctx context.Context, indexArg int) (types.MapBinaryAliasExample, error)
	ReceiveMapBooleanAliasExample(ctx context.Context, indexArg int) (types.MapBooleanAliasExample, error)
	ReceiveMapDateTimeAliasExample(ctx context.Context, indexArg int) (types.MapDateTimeAliasExample, error)
	ReceiveMapDoubleAliasExample(ctx context.Context, indexArg int) (types.MapDoubleAliasExample, error)
	ReceiveMapIntegerAliasExample(ctx context.Context, indexArg int) (types.MapIntegerAliasExample, error)
	ReceiveMapRidAliasExample(ctx context.Context, indexArg int) (types.MapRidAliasExample, error)
	ReceiveMapSafeLongAliasExample(ctx context.Context, indexArg int) (types.MapSafeLongAliasExample, error)
	ReceiveMapStringAliasExample(ctx context.Context, indexArg int) (types.MapStringAliasExample, error)
	ReceiveMapUuidAliasExample(ctx context.Context, indexArg int) (types.MapUuidAliasExample, error)
	ReceiveMapEnumExampleAlias(ctx context.Context, indexArg int) (types.MapEnumExampleAlias, error)
}

type autoDeserializeServiceClient struct {
	client httpclient.Client
}

func NewAutoDeserializeServiceClient(client httpclient.Client) AutoDeserializeServiceClient {
	return &autoDeserializeServiceClient{client: client}
}

func (c *autoDeserializeServiceClient) ReceiveBearerTokenExample(ctx context.Context, indexArg int) (types.BearerTokenExample, error) {
	var defaultReturnVal types.BearerTokenExample
	var returnVal *types.BearerTokenExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveBearerTokenExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveBearerTokenExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveBooleanExample(ctx context.Context, indexArg int) (types.BooleanExample, error) {
	var defaultReturnVal types.BooleanExample
	var returnVal *types.BooleanExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveBooleanExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveBooleanExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveDateTimeExample(ctx context.Context, indexArg int) (types.DateTimeExample, error) {
	var defaultReturnVal types.DateTimeExample
	var returnVal *types.DateTimeExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveDateTimeExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveDateTimeExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveDoubleExample(ctx context.Context, indexArg int) (types.DoubleExample, error) {
	var defaultReturnVal types.DoubleExample
	var returnVal *types.DoubleExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveDoubleExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveDoubleExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveIntegerExample(ctx context.Context, indexArg int) (types.IntegerExample, error) {
	var defaultReturnVal types.IntegerExample
	var returnVal *types.IntegerExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveIntegerExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveIntegerExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveRidExample(ctx context.Context, indexArg int) (types.RidExample, error) {
	var defaultReturnVal types.RidExample
	var returnVal *types.RidExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveRidExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveRidExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSafeLongExample(ctx context.Context, indexArg int) (types.SafeLongExample, error) {
	var defaultReturnVal types.SafeLongExample
	var returnVal *types.SafeLongExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSafeLongExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSafeLongExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveStringExample(ctx context.Context, indexArg int) (types.StringExample, error) {
	var defaultReturnVal types.StringExample
	var returnVal *types.StringExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveStringExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveStringExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveUuidExample(ctx context.Context, indexArg int) (types.UuidExample, error) {
	var defaultReturnVal types.UuidExample
	var returnVal *types.UuidExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveUuidExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveUuidExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveAnyExample(ctx context.Context, indexArg int) (types.AnyExample, error) {
	var defaultReturnVal types.AnyExample
	var returnVal *types.AnyExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveAnyExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveAnyExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListExample(ctx context.Context, indexArg int) (types.ListExample, error) {
	var defaultReturnVal types.ListExample
	var returnVal *types.ListExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetStringExample(ctx context.Context, indexArg int) (types.SetStringExample, error) {
	var defaultReturnVal types.SetStringExample
	var returnVal *types.SetStringExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetStringExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetStringExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetDoubleExample(ctx context.Context, indexArg int) (types.SetDoubleExample, error) {
	var defaultReturnVal types.SetDoubleExample
	var returnVal *types.SetDoubleExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetDoubleExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetDoubleExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapExample(ctx context.Context, indexArg int) (types.MapExample, error) {
	var defaultReturnVal types.MapExample
	var returnVal *types.MapExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalExample(ctx context.Context, indexArg int) (types.OptionalExample, error) {
	var defaultReturnVal types.OptionalExample
	var returnVal *types.OptionalExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalBooleanExample(ctx context.Context, indexArg int) (types.OptionalBooleanExample, error) {
	var defaultReturnVal types.OptionalBooleanExample
	var returnVal *types.OptionalBooleanExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalBooleanExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalBooleanExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalIntegerExample(ctx context.Context, indexArg int) (types.OptionalIntegerExample, error) {
	var defaultReturnVal types.OptionalIntegerExample
	var returnVal *types.OptionalIntegerExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalIntegerExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalIntegerExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveLongFieldNameOptionalExample(ctx context.Context, indexArg int) (types.LongFieldNameOptionalExample, error) {
	var defaultReturnVal types.LongFieldNameOptionalExample
	var returnVal *types.LongFieldNameOptionalExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveLongFieldNameOptionalExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveLongFieldNameOptionalExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveRawOptionalExample(ctx context.Context, indexArg int) (types.RawOptionalExample, error) {
	var defaultReturnVal types.RawOptionalExample
	var returnVal *types.RawOptionalExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveRawOptionalExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveRawOptionalExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveStringAliasExample(ctx context.Context, indexArg int) (types.StringAliasExample, error) {
	var defaultReturnVal types.StringAliasExample
	var returnVal *types.StringAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveStringAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveStringAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveDoubleAliasExample(ctx context.Context, indexArg int) (types.DoubleAliasExample, error) {
	var defaultReturnVal types.DoubleAliasExample
	var returnVal *types.DoubleAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveDoubleAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveDoubleAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveIntegerAliasExample(ctx context.Context, indexArg int) (types.IntegerAliasExample, error) {
	var defaultReturnVal types.IntegerAliasExample
	var returnVal *types.IntegerAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveIntegerAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveIntegerAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveBooleanAliasExample(ctx context.Context, indexArg int) (types.BooleanAliasExample, error) {
	var defaultReturnVal types.BooleanAliasExample
	var returnVal *types.BooleanAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveBooleanAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveBooleanAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSafeLongAliasExample(ctx context.Context, indexArg int) (types.SafeLongAliasExample, error) {
	var defaultReturnVal types.SafeLongAliasExample
	var returnVal *types.SafeLongAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSafeLongAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSafeLongAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveRidAliasExample(ctx context.Context, indexArg int) (types.RidAliasExample, error) {
	var defaultReturnVal types.RidAliasExample
	var returnVal *types.RidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveRidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveRidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveBearerTokenAliasExample(ctx context.Context, indexArg int) (types.BearerTokenAliasExample, error) {
	var defaultReturnVal types.BearerTokenAliasExample
	var returnVal *types.BearerTokenAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveBearerTokenAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveBearerTokenAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveUuidAliasExample(ctx context.Context, indexArg int) (types.UuidAliasExample, error) {
	var defaultReturnVal types.UuidAliasExample
	var returnVal *types.UuidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveUuidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveUuidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveReferenceAliasExample(ctx context.Context, indexArg int) (types.ReferenceAliasExample, error) {
	var defaultReturnVal types.ReferenceAliasExample
	var returnVal *types.ReferenceAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveReferenceAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveReferenceAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveDateTimeAliasExample(ctx context.Context, indexArg int) (types.DateTimeAliasExample, error) {
	var defaultReturnVal types.DateTimeAliasExample
	var returnVal *types.DateTimeAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveDateTimeAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveDateTimeAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveKebabCaseObjectExample(ctx context.Context, indexArg int) (types.KebabCaseObjectExample, error) {
	var defaultReturnVal types.KebabCaseObjectExample
	var returnVal *types.KebabCaseObjectExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveKebabCaseObjectExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveKebabCaseObjectExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSnakeCaseObjectExample(ctx context.Context, indexArg int) (types.SnakeCaseObjectExample, error) {
	var defaultReturnVal types.SnakeCaseObjectExample
	var returnVal *types.SnakeCaseObjectExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSnakeCaseObjectExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSnakeCaseObjectExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalBearerTokenAliasExample(ctx context.Context, indexArg int) (types.OptionalBearerTokenAliasExample, error) {
	var defaultReturnVal types.OptionalBearerTokenAliasExample
	var returnVal *types.OptionalBearerTokenAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalBearerTokenAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalBearerTokenAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalBinaryAliasExample(ctx context.Context, indexArg int) (types.OptionalBinaryAliasExample, error) {
	var defaultReturnVal types.OptionalBinaryAliasExample
	var returnVal *types.OptionalBinaryAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalBinaryAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalBinaryAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalBooleanAliasExample(ctx context.Context, indexArg int) (types.OptionalBooleanAliasExample, error) {
	var defaultReturnVal types.OptionalBooleanAliasExample
	var returnVal *types.OptionalBooleanAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalBooleanAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalBooleanAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalDateTimeAliasExample(ctx context.Context, indexArg int) (types.OptionalDateTimeAliasExample, error) {
	var defaultReturnVal types.OptionalDateTimeAliasExample
	var returnVal *types.OptionalDateTimeAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalDateTimeAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalDateTimeAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalDoubleAliasExample(ctx context.Context, indexArg int) (types.OptionalDoubleAliasExample, error) {
	var defaultReturnVal types.OptionalDoubleAliasExample
	var returnVal *types.OptionalDoubleAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalDoubleAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalDoubleAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalIntegerAliasExample(ctx context.Context, indexArg int) (types.OptionalIntegerAliasExample, error) {
	var defaultReturnVal types.OptionalIntegerAliasExample
	var returnVal *types.OptionalIntegerAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalIntegerAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalIntegerAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalRidAliasExample(ctx context.Context, indexArg int) (types.OptionalRidAliasExample, error) {
	var defaultReturnVal types.OptionalRidAliasExample
	var returnVal *types.OptionalRidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalRidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalRidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalSafeLongAliasExample(ctx context.Context, indexArg int) (types.OptionalSafeLongAliasExample, error) {
	var defaultReturnVal types.OptionalSafeLongAliasExample
	var returnVal *types.OptionalSafeLongAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalSafeLongAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalSafeLongAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalStringAliasExample(ctx context.Context, indexArg int) (types.OptionalStringAliasExample, error) {
	var defaultReturnVal types.OptionalStringAliasExample
	var returnVal *types.OptionalStringAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalStringAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalStringAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalUuidAliasExample(ctx context.Context, indexArg int) (types.OptionalUuidAliasExample, error) {
	var defaultReturnVal types.OptionalUuidAliasExample
	var returnVal *types.OptionalUuidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalUuidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalUuidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalAnyAliasExample(ctx context.Context, indexArg int) (types.OptionalAnyAliasExample, error) {
	var defaultReturnVal types.OptionalAnyAliasExample
	var returnVal *types.OptionalAnyAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalAnyAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveOptionalAnyAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListBearerTokenAliasExample(ctx context.Context, indexArg int) (types.ListBearerTokenAliasExample, error) {
	var defaultReturnVal types.ListBearerTokenAliasExample
	var returnVal *types.ListBearerTokenAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListBearerTokenAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListBearerTokenAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListBinaryAliasExample(ctx context.Context, indexArg int) (types.ListBinaryAliasExample, error) {
	var defaultReturnVal types.ListBinaryAliasExample
	var returnVal *types.ListBinaryAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListBinaryAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListBinaryAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListBooleanAliasExample(ctx context.Context, indexArg int) (types.ListBooleanAliasExample, error) {
	var defaultReturnVal types.ListBooleanAliasExample
	var returnVal *types.ListBooleanAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListBooleanAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListBooleanAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListDateTimeAliasExample(ctx context.Context, indexArg int) (types.ListDateTimeAliasExample, error) {
	var defaultReturnVal types.ListDateTimeAliasExample
	var returnVal *types.ListDateTimeAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListDateTimeAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListDateTimeAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListDoubleAliasExample(ctx context.Context, indexArg int) (types.ListDoubleAliasExample, error) {
	var defaultReturnVal types.ListDoubleAliasExample
	var returnVal *types.ListDoubleAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListDoubleAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListDoubleAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListIntegerAliasExample(ctx context.Context, indexArg int) (types.ListIntegerAliasExample, error) {
	var defaultReturnVal types.ListIntegerAliasExample
	var returnVal *types.ListIntegerAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListIntegerAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListIntegerAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListRidAliasExample(ctx context.Context, indexArg int) (types.ListRidAliasExample, error) {
	var defaultReturnVal types.ListRidAliasExample
	var returnVal *types.ListRidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListRidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListRidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListSafeLongAliasExample(ctx context.Context, indexArg int) (types.ListSafeLongAliasExample, error) {
	var defaultReturnVal types.ListSafeLongAliasExample
	var returnVal *types.ListSafeLongAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListSafeLongAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListSafeLongAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListStringAliasExample(ctx context.Context, indexArg int) (types.ListStringAliasExample, error) {
	var defaultReturnVal types.ListStringAliasExample
	var returnVal *types.ListStringAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListStringAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListStringAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListUuidAliasExample(ctx context.Context, indexArg int) (types.ListUuidAliasExample, error) {
	var defaultReturnVal types.ListUuidAliasExample
	var returnVal *types.ListUuidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListUuidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListUuidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListAnyAliasExample(ctx context.Context, indexArg int) (types.ListAnyAliasExample, error) {
	var defaultReturnVal types.ListAnyAliasExample
	var returnVal *types.ListAnyAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListAnyAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveListAnyAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetBearerTokenAliasExample(ctx context.Context, indexArg int) (types.SetBearerTokenAliasExample, error) {
	var defaultReturnVal types.SetBearerTokenAliasExample
	var returnVal *types.SetBearerTokenAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetBearerTokenAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetBearerTokenAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetBinaryAliasExample(ctx context.Context, indexArg int) (types.SetBinaryAliasExample, error) {
	var defaultReturnVal types.SetBinaryAliasExample
	var returnVal *types.SetBinaryAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetBinaryAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetBinaryAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetBooleanAliasExample(ctx context.Context, indexArg int) (types.SetBooleanAliasExample, error) {
	var defaultReturnVal types.SetBooleanAliasExample
	var returnVal *types.SetBooleanAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetBooleanAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetBooleanAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetDateTimeAliasExample(ctx context.Context, indexArg int) (types.SetDateTimeAliasExample, error) {
	var defaultReturnVal types.SetDateTimeAliasExample
	var returnVal *types.SetDateTimeAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetDateTimeAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetDateTimeAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetDoubleAliasExample(ctx context.Context, indexArg int) (types.SetDoubleAliasExample, error) {
	var defaultReturnVal types.SetDoubleAliasExample
	var returnVal *types.SetDoubleAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetDoubleAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetDoubleAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetIntegerAliasExample(ctx context.Context, indexArg int) (types.SetIntegerAliasExample, error) {
	var defaultReturnVal types.SetIntegerAliasExample
	var returnVal *types.SetIntegerAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetIntegerAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetIntegerAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetRidAliasExample(ctx context.Context, indexArg int) (types.SetRidAliasExample, error) {
	var defaultReturnVal types.SetRidAliasExample
	var returnVal *types.SetRidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetRidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetRidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetSafeLongAliasExample(ctx context.Context, indexArg int) (types.SetSafeLongAliasExample, error) {
	var defaultReturnVal types.SetSafeLongAliasExample
	var returnVal *types.SetSafeLongAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetSafeLongAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetSafeLongAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetStringAliasExample(ctx context.Context, indexArg int) (types.SetStringAliasExample, error) {
	var defaultReturnVal types.SetStringAliasExample
	var returnVal *types.SetStringAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetStringAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetStringAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetUuidAliasExample(ctx context.Context, indexArg int) (types.SetUuidAliasExample, error) {
	var defaultReturnVal types.SetUuidAliasExample
	var returnVal *types.SetUuidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetUuidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetUuidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetAnyAliasExample(ctx context.Context, indexArg int) (types.SetAnyAliasExample, error) {
	var defaultReturnVal types.SetAnyAliasExample
	var returnVal *types.SetAnyAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetAnyAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveSetAnyAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapBearerTokenAliasExample(ctx context.Context, indexArg int) (types.MapBearerTokenAliasExample, error) {
	var defaultReturnVal types.MapBearerTokenAliasExample
	var returnVal *types.MapBearerTokenAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapBearerTokenAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapBearerTokenAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapBinaryAliasExample(ctx context.Context, indexArg int) (types.MapBinaryAliasExample, error) {
	var defaultReturnVal types.MapBinaryAliasExample
	var returnVal *types.MapBinaryAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapBinaryAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapBinaryAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapBooleanAliasExample(ctx context.Context, indexArg int) (types.MapBooleanAliasExample, error) {
	var defaultReturnVal types.MapBooleanAliasExample
	var returnVal *types.MapBooleanAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapBooleanAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapBooleanAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapDateTimeAliasExample(ctx context.Context, indexArg int) (types.MapDateTimeAliasExample, error) {
	var defaultReturnVal types.MapDateTimeAliasExample
	var returnVal *types.MapDateTimeAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapDateTimeAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapDateTimeAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapDoubleAliasExample(ctx context.Context, indexArg int) (types.MapDoubleAliasExample, error) {
	var defaultReturnVal types.MapDoubleAliasExample
	var returnVal *types.MapDoubleAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapDoubleAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapDoubleAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapIntegerAliasExample(ctx context.Context, indexArg int) (types.MapIntegerAliasExample, error) {
	var defaultReturnVal types.MapIntegerAliasExample
	var returnVal *types.MapIntegerAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapIntegerAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapIntegerAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapRidAliasExample(ctx context.Context, indexArg int) (types.MapRidAliasExample, error) {
	var defaultReturnVal types.MapRidAliasExample
	var returnVal *types.MapRidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapRidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapRidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapSafeLongAliasExample(ctx context.Context, indexArg int) (types.MapSafeLongAliasExample, error) {
	var defaultReturnVal types.MapSafeLongAliasExample
	var returnVal *types.MapSafeLongAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapSafeLongAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapSafeLongAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapStringAliasExample(ctx context.Context, indexArg int) (types.MapStringAliasExample, error) {
	var defaultReturnVal types.MapStringAliasExample
	var returnVal *types.MapStringAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapStringAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapStringAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapUuidAliasExample(ctx context.Context, indexArg int) (types.MapUuidAliasExample, error) {
	var defaultReturnVal types.MapUuidAliasExample
	var returnVal *types.MapUuidAliasExample
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapUuidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapUuidAliasExample/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapEnumExampleAlias(ctx context.Context, indexArg int) (types.MapEnumExampleAlias, error) {
	var defaultReturnVal types.MapEnumExampleAlias
	var returnVal *types.MapEnumExampleAlias
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return defaultReturnVal, werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapEnumExampleAlias"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/body/receiveMapEnumExampleAlias/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

type SinglePathParamServiceClient interface {
	PathParamBoolean(ctx context.Context, indexArg int, paramArg bool) error
	PathParamDatetime(ctx context.Context, indexArg int, paramArg datetime.DateTime) error
	PathParamDouble(ctx context.Context, indexArg int, paramArg float64) error
	PathParamInteger(ctx context.Context, indexArg int, paramArg int) error
	PathParamRid(ctx context.Context, indexArg int, paramArg rid.ResourceIdentifier) error
	PathParamSafelong(ctx context.Context, indexArg int, paramArg safelong.SafeLong) error
	PathParamString(ctx context.Context, indexArg int, paramArg string) error
	PathParamUuid(ctx context.Context, indexArg int, paramArg uuid.UUID) error
	PathParamAliasString(ctx context.Context, indexArg int, paramArg types.AliasString) error
}

type singlePathParamServiceClient struct {
	client httpclient.Client
}

func NewSinglePathParamServiceClient(client httpclient.Client) SinglePathParamServiceClient {
	return &singlePathParamServiceClient{client: client}
}

func (c *singlePathParamServiceClient) PathParamBoolean(ctx context.Context, indexArg int, paramArg bool) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamBoolean"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamBoolean/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamDatetime(ctx context.Context, indexArg int, paramArg datetime.DateTime) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamDatetime"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamDatetime/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamDouble(ctx context.Context, indexArg int, paramArg float64) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamDouble"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamDouble/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamInteger(ctx context.Context, indexArg int, paramArg int) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamInteger"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamInteger/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamRid(ctx context.Context, indexArg int, paramArg rid.ResourceIdentifier) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamRid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamRid/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamSafelong(ctx context.Context, indexArg int, paramArg safelong.SafeLong) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamSafelong"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamSafelong/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamString(ctx context.Context, indexArg int, paramArg string) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamString/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamUuid(ctx context.Context, indexArg int, paramArg uuid.UUID) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamUuid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamUuid/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamAliasString(ctx context.Context, indexArg int, paramArg types.AliasString) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	paramArgStr := url.PathEscape(fmt.Sprint(paramArg))
	if len(paramArgStr) == 0 {
		return werror.Error("path param \"param\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamAliasString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-path-param/pathParamAliasString/%s/%s", indexArgStr, paramArgStr))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

type SingleQueryParamServiceClient interface {
	QueryParamBoolean(ctx context.Context, indexArg int, someQueryArg bool) error
	QueryParamDouble(ctx context.Context, indexArg int, someQueryArg float64) error
	QueryParamInteger(ctx context.Context, indexArg int, someQueryArg int) error
	QueryParamRid(ctx context.Context, indexArg int, someQueryArg rid.ResourceIdentifier) error
	QueryParamSafelong(ctx context.Context, indexArg int, someQueryArg safelong.SafeLong) error
	QueryParamString(ctx context.Context, indexArg int, someQueryArg string) error
	QueryParamUuid(ctx context.Context, indexArg int, someQueryArg uuid.UUID) error
	QueryParamOptionalOfString(ctx context.Context, indexArg int, someQueryArg *string) error
	QueryParamAliasString(ctx context.Context, indexArg int, someQueryArg types.AliasString) error
}

type singleQueryParamServiceClient struct {
	client httpclient.Client
}

func NewSingleQueryParamServiceClient(client httpclient.Client) SingleQueryParamServiceClient {
	return &singleQueryParamServiceClient{client: client}
}

func (c *singleQueryParamServiceClient) QueryParamBoolean(ctx context.Context, indexArg int, someQueryArg bool) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamBoolean"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamBoolean/%s", indexArgStr))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamDouble(ctx context.Context, indexArg int, someQueryArg float64) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamDouble"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamDouble/%s", indexArgStr))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamInteger(ctx context.Context, indexArg int, someQueryArg int) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamInteger"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamInteger/%s", indexArgStr))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamRid(ctx context.Context, indexArg int, someQueryArg rid.ResourceIdentifier) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamRid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamRid/%s", indexArgStr))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamSafelong(ctx context.Context, indexArg int, someQueryArg safelong.SafeLong) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamSafelong"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamSafelong/%s", indexArgStr))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamString(ctx context.Context, indexArg int, someQueryArg string) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamString/%s", indexArgStr))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamUuid(ctx context.Context, indexArg int, someQueryArg uuid.UUID) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamUuid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamUuid/%s", indexArgStr))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamOptionalOfString(ctx context.Context, indexArg int, someQueryArg *string) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamOptionalOfString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamOptionalOfString/%s", indexArgStr))
	queryParams := make(url.Values)
	if someQueryArg != nil {
		queryParams.Set("foo", fmt.Sprint(*someQueryArg))
	}
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamAliasString(ctx context.Context, indexArg int, someQueryArg types.AliasString) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamAliasString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-query-param/queryParamAliasString/%s", indexArgStr))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

type SingleHeaderServiceClient interface {
	HeaderBearertoken(ctx context.Context, indexArg int, headerArg bearertoken.Token) error
	HeaderBoolean(ctx context.Context, indexArg int, headerArg bool) error
	HeaderDatetime(ctx context.Context, indexArg int, headerArg datetime.DateTime) error
	HeaderDouble(ctx context.Context, indexArg int, headerArg float64) error
	HeaderInteger(ctx context.Context, indexArg int, headerArg int) error
	HeaderRid(ctx context.Context, indexArg int, headerArg rid.ResourceIdentifier) error
	HeaderSafelong(ctx context.Context, indexArg int, headerArg safelong.SafeLong) error
	HeaderString(ctx context.Context, indexArg int, headerArg string) error
	HeaderUuid(ctx context.Context, indexArg int, headerArg uuid.UUID) error
	HeaderOptionalOfString(ctx context.Context, indexArg int, headerArg *string) error
	HeaderAliasString(ctx context.Context, indexArg int, headerArg types.AliasString) error
}

type singleHeaderServiceClient struct {
	client httpclient.Client
}

func NewSingleHeaderServiceClient(client httpclient.Client) SingleHeaderServiceClient {
	return &singleHeaderServiceClient{client: client}
}

func (c *singleHeaderServiceClient) HeaderBearertoken(ctx context.Context, indexArg int, headerArg bearertoken.Token) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderBearertoken"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerBearertoken/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderBoolean(ctx context.Context, indexArg int, headerArg bool) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderBoolean"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerBoolean/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderDatetime(ctx context.Context, indexArg int, headerArg datetime.DateTime) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderDatetime"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerDatetime/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderDouble(ctx context.Context, indexArg int, headerArg float64) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderDouble"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerDouble/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderInteger(ctx context.Context, indexArg int, headerArg int) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderInteger"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerInteger/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderRid(ctx context.Context, indexArg int, headerArg rid.ResourceIdentifier) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderRid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerRid/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderSafelong(ctx context.Context, indexArg int, headerArg safelong.SafeLong) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderSafelong"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerSafelong/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderString(ctx context.Context, indexArg int, headerArg string) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerString/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderUuid(ctx context.Context, indexArg int, headerArg uuid.UUID) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderUuid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerUuid/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderOptionalOfString(ctx context.Context, indexArg int, headerArg *string) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderOptionalOfString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerOptionalOfString/%s", indexArgStr))
	if headerArg != nil {
		requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(*headerArg)))
	}
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderAliasString(ctx context.Context, indexArg int, headerArg types.AliasString) error {
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderAliasString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/single-header-param/headerAliasString/%s", indexArgStr))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

type AutoDeserializeConfirmServiceClient interface {
	// Send the response received for positive test cases here to verify that it has been serialized and deserialized properly.
	Confirm(ctx context.Context, endpointArg EndpointName, indexArg int, bodyArg interface{}) error
}

type autoDeserializeConfirmServiceClient struct {
	client httpclient.Client
}

func NewAutoDeserializeConfirmServiceClient(client httpclient.Client) AutoDeserializeConfirmServiceClient {
	return &autoDeserializeConfirmServiceClient{client: client}
}

func (c *autoDeserializeConfirmServiceClient) Confirm(ctx context.Context, endpointArg EndpointName, indexArg int, bodyArg interface{}) error {
	endpointArgStr := url.PathEscape(fmt.Sprint(endpointArg))
	if len(endpointArgStr) == 0 {
		return werror.Error("path param \"endpoint\" can not be empty")
	}
	indexArgStr := url.PathEscape(fmt.Sprint(indexArg))
	if len(indexArgStr) == 0 {
		return werror.Error("path param \"index\" can not be empty")
	}
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("Confirm"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/confirm/%s/%s", endpointArgStr, indexArgStr))
	requestParams = append(requestParams, httpclient.WithJSONRequest(bodyArg))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}
